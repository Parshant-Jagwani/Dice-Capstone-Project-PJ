name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image for Client
      uses: docker/build-push-action@v2
      with:
        context: ./client
        push: true
        tags: parshantjagwani/client-serverapp-client:latest

    - name: Build and push Docker image for Server
      uses: docker/build-push-action@v2
      with:
        context: ./server
        push: true
        tags: parshantjagwani/client-serverapp-server:latest

    - name: Upload Docker Compose
      uses: actions/upload-artifact@v2
      with:
        name: docker-compose
        path: ./docker-compose.yml

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download Docker Compose
      uses: actions/download-artifact@v2
      with:
        name: docker-compose

    - name: Update Docker Compose with latest images
      run: |
        sed -i 's|parshantjagwani/client-serverapp-client:.*|parshantjagwani/client-serverapp-client:latest|' docker-compose.yml
        sed -i 's|parshantjagwani/client-serverapp-server:.*|parshantjagwani/client-serverapp-server:latest|' docker-compose.yml

    - name: Deploy to Client VM
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws ssm send-command --document-name "AWS-RunShellScript" --${{ secrets.CLIENT_INSTANCE_ID }} $(aws ec2 describe-instances commands="docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} && docker-compose -f docker-compose.yml up --build --remove-orphans"

    - name: Deploy to Server VM
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws ssm send-command --document-name "AWS-RunShellScript" --${{ secrets.SERVER_INSTANCE_ID }} $(aws ec2 describe-instances commands="docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} && docker-compose -f docker-compose.yml up --build --remove-orphans"

  notify:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
    - name: Send deployment notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEB }}
