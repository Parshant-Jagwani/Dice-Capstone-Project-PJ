name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Ensure Dockerfiles are present in client and server directories
    - name: Build and push Docker image for Client
      uses: docker/build-push-action@v2
      with:
        context: ./client/
        push: true
        tags: parshantjagwani/client:latest

    - name: Build and push Docker image for Server
      uses: docker/build-push-action@v2
      with:
        context: ./server/
        push: true
        tags: parshantjagwani/server:latest

    - name: Upload Docker Compose
      uses: actions/upload-artifact@v2
      with:
        name: docker-compose
        path: ./docker-compose.yml

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Pulling Server and Client From Docker Hub
      uses: actions/download-artifact@v2
      with:
        name: Pull Client image from DockerHub
        run: |
          docker pull parshantjagwani/client:latest
          docker pull parshantjagwani/server:latest

    - name: Update Docker Compose with latest images
      run: |
        sed -i 's|parshantjagwani/client:v2.*|parshantjagwani/client:latest|' docker-compose.yml
        sed -i 's|parshantjagwani/server:v2.*|parshantjagwani/server:latest|' docker-compose.yml

    # Configure EC2-VMs as private Git runners and use AWS credentials for deploying
    - name: Deploy to Client VM
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws ssm send-command --document-name "AWS-RunShellScript" --instance-ids ${{ secrets.CLIENT_INSTANCE_ID }} $(aws ec2 describe-instances --query 'Reservations[].Instances[].InstanceId' --output text) --commands "docker-compose up --build --remove-orphans"

    - name: Deploy to Server VM
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws ssm send-command --document-name "AWS-RunShellScript" --instance-ids ${{ secrets.SERVER_INSTANCE_ID }} $(aws ec2 describe-instances --query 'Reservations[].Instances[].InstanceId' --output text) --commands "docker-compose up --build --remove-orphans"

  notify:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
    - name: Send deployment notification
      uses: rtCamp/action-slack-notify@v2
      with:
        payload: |
          {
            "text": "Server deployed successfully: ${{ github.run_id }}"
          }
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
